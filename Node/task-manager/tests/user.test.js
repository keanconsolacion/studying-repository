const request = require("supertest");
const app = require("../src/app");
const User = require("../src/models/user");

const { testUserId, testUser, testUserId2, testUser2, setupDatabase } = require("./fixtures/db");

beforeEach(setupDatabase);

test("Should signup a new user", async () => {
	const response = await request(app)
		.post("/users")
		.send({ name: "Martinn", email: "martin@somedomain.com", password: "kean123123" })
		.expect(201);

	// Assert database was updated correctly
	const user = await User.findById(response.body.user._id);
	expect(user).not.toBeNull();

	// Assertions about response:
	expect(response.body).toMatchObject({
		user: {
			name: "Martinn",
			email: "martin@somedomain.com",
		},
		token: user.tokens[0].token,
	});

	// Assert password is hashed in database
	expect(user.password).not.toBe("kean123123");
});

test("Should login existing user", async () => {
	const response = await request(app)
		.post("/users/login")
		.send({
			email: testUser.email,
			password: testUser.password,
		})
		.expect(200);

	// Assert the new token generated by logging in is saved in database
	const user = await User.findById(testUserId);
	expect(response.body.token).toBe(user.tokens[1].token);
});

test("Should not login non-existing user", async () => {
	await request(app)
		.post("/users/login")
		.send({
			email: "unidentified@gmail.com",
			password: "unidentifieduserrr123",
		})
		.expect(400);
});

test("Should get profile for user", async () => {
	await request(app).get("/users/me").set("Authorization", `Bearer ${testUser.tokens[0].token}`).send().expect(200);
});

test("Should not get profile for unauthenticated user", async () => {
	await request(app).get("/users/me").send().expect(401);
});

test("Should delete account for user", async () => {
	await request(app).delete("/users/me").set("Authorization", `Bearer ${testUser.tokens[0].token}`).send().expect(200);

	// Assert that the user is deleted in the database.
	const user = await User.findById(testUserId);
	expect(user).toBeNull();
});

test("Should not delete account for unauthenticated user", async () => {
	await request(app).delete("/users/me").send().expect(401);
});

test("Should upload avatar image", async () => {
	const response = await request(app)
		.post("/users/me/avatar")
		.set("Authorization", `Bearer ${testUser.tokens[0].token}`)
		.attach("avatar", "tests/fixtures/profile-pic.jpg")
		.expect(200);

	const user = await User.findById(testUserId);
	expect(user.avatar).toEqual(expect.any(Buffer));
});

test("Should update valid user fields", async () => {
	const response = await request(app)
		.patch("/users/me")
		.set("Authorization", `Bearer ${testUser.tokens[0].token}`)
		.send({ name: "Andrei" })
		.expect(200);

	const user = await User.findById(testUserId);
	expect(user.name).toBe("Andrei");
});

test("Should not be able to update invalid user fields", async () => {
	await request(app)
		.patch("/users/me")
		.set("Authorization", `Bearer ${testUser.tokens[0].token}`)
		.send({ invalidField: "Hello" })
		.expect(400);
});
